package org.example;

import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicLong;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * <p>Demonstrates the execution of a JVM when it encounters an
 * uncaught/unhandled {@link NullPointerException}.</p>
 * <p>Run this class with Java 11 and then run it again with Java
 * 17. Notice the difference in the default messages generated by
 * the {@link NullPointerException} instance that is thrown.</p>
 */
public class UncaughtExceptionExample {
  private static final Logger LOG = LoggerFactory.getLogger(UncaughtExceptionExample.class);

  public static void main(final String[] args) throws InterruptedException {
    final var x = new AtomicLong(2);
    final AtomicLong y = null;
    final var z = new AtomicLong(4);
    LOG.info("Normal execution flow in the JVM ...");
    LOG.info("The next log statement will call a function that will trigger an uncaught/unhandled "
        + "NullPointerException in the JVM.");
    /* Pause one second to allow the previous log statement output to catch up before
     * triggering the NullPointerException on line 28. */
    TimeUnit.SECONDS.sleep(1);
    LOG.info("The computed value is {}", Calculator.compute(x.get(), y.get(), z.get()));
  }
}
